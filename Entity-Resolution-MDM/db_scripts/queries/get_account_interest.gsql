CREATE QUERY get_account_interest(vertex<Account> input_acc, int k) FOR GRAPH Entity_Resolution { 
	/**********************************************************
	 * Example parameters:
	 *   Acount : 407
	 *   k : 5
	 **********************************************************/
	
  	SetAccum<VERTEX<Account>> @@connected_accounts;
	MapAccum<VERTEX, int> @map;
	OrAccum @visited;
	SumAccum<uint> @cnt;
	ListAccum<EDGE> @@list;
	
	start = {input_acc};
	
	WHILE start.size() > 0 DO
	  start = SELECT t FROM start:s-(Same_Owner:e)-:t
	          WHERE t.@visited == FALSE
	          POST-ACCUM @@connected_accounts += t, t.@visited = TRUE;
	END;
	
	start = @@connected_accounts;
	
	paly_event = SELECT t FROM start:s-(Has_Play_Event:e)-:t ACCUM @@list += e;
	
	videos = SELECT t FROM paly_event:s-(Play_Video:e)-:t ACCUM t.@cnt += 1, @@list += e;
	
	genre_key_w = 	SELECT t FROM videos:s-((Has_Genre|Has_Keyword):e)-:t 
	            	ACCUM t.@cnt += s.@cnt, @@list += e;
	
	videos = SELECT t from genre_key_w:s-((Has_Genre|Has_Keyword):e)-:t 
	         WHERE t.@cnt == 0	
	         ACCUM t.@cnt += s.@cnt, t.@map += (s->s.@cnt)
	         ORDER BY t.@cnt DESC LIMIT k;
	
	PRINT videos;
	
	videos = SELECT s from videos:s-((Has_Genre|Has_Keyword):e)-:t
	         ACCUM @@list += e;
	
	PRINT @@list;
}