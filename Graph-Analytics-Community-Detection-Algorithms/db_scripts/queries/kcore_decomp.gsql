CREATE QUERY kcore_decomp(STRING vertex_type, STRING edge_type, INT k_min, 
  INT k_max = -1, BOOL show_membership=false, BOOL show_shells=true) 
  FOR GRAPH MyGraph SYNTAX V2 { 
/* Outputs the k-core vertex membership for each value of k from k_min to k_max.
 * By definition, for k=0, the vertex set = the entire graph.
 * As k increases, V(k) is a subset of V(k-1).
 * If k_max < 0, then the query proceeds until it reaches the maximal k-core.
 * Calls kcore_sub().
 */
  MapAccum<INT, SetAccum<VERTEX>> @@core_list_map; // Map <k, k-core_vertex_set>
  SetAccum<VERTEX> @@k_core_vertices;              // vertex set for k_max
  ListAccum<EDGE> @@induced_edges;                // optional output
  INT k_upper;                        // actual max K
  INT print_upper;                    // max value of K to output

  
  @@core_list_map += kcore_sub(vertex_type, edge_type, 1);
  k_upper = @@core_list_map.size() - 1;
  IF k_max < 0 THEN
    print_upper = k_upper;
  ELSE
    print_upper = k_max;
  END;
  
// First, print just the size of each k-core  
  FOREACH k IN RANGE [k_upper, k_min].STEP(-1) DO
      IF @@core_list_map.get(k).size() > 0 THEN      // If the k-shell has some vertices
          @@k_core_vertices += @@core_list_map.get(k);
          IF k BETWEEN k_min and print_upper THEN 
              PRINT k,@@k_core_vertices.size();
          END;
      END;
  END;
  
// Next, print the membership of each k-core
  IF show_membership THEN
      FOREACH k IN RANGE [k_upper, k_min].STEP(-1) DO
          IF @@core_list_map.get(k).size() > 0 THEN      // If the k-shell has some vertices
              @@k_core_vertices += @@core_list_map.get(k);
              IF k BETWEEN k_min and print_upper THEN
                  IF show_shells THEN
                    PRINT k, @@core_list_map.get(k);
                  ELSE
                    PRINT k,@@k_core_vertices;
                  END;
              END;
          END;
      END;
  END;
}