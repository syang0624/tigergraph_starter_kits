create query price_prediction(SET<STRING> input, INT maxIteration, BOOL doUpdate) for graph demo_graph syntax v2
{
  /* 
   With a set of string as input, in the format of PRODUCT_NAME,NEW_PRICE, recalculate the new price for the connected BOM subgraph.

   This algorithm includes two phases:
    1) traverse down to the raw materials and mark the topology order (maximum depth) for each vertex
    2) traverse down to the raw materials again and calculate the new prices based on the topology order

   Sampe input
    input:STEEL RODS,0.2
    maxIteration: 10
    doUpdate:false
  */

  SumAccum<INT> @@depth = 0;
  MaxAccum<INT> @max_Depth = 0;
  OrAccum @visited_1 = FALSE;

  OrAccum @is_Start = FALSE;

  MapAccum<STRING,FLOAT> @@result;
  MapAccum<STRING,FLOAT> @mapping;
  MapAccum<STRING,INT>   @amount_Map;
  OrAccum @visited = FALSE;
  SumAccum<FLOAT> @new_price;

  MapAccum<VERTEX,DOUBLE> @@input_Map;
  SetAccum<VERTEX> @@start_Set;

  SetAccum<EDGE> @@display_Set;
  SetAccum<VERTEX> @@display_V;

  STRING input_key = "";
  STRING input_val = "";

  // parse the input strings and put them in to a vertex set
  FOREACH str IN input DO
    GetKeyVal(str, input_key, input_val);
    @@input_Map += (to_vertex(input_key, "product") -> str_to_double(input_val));
    @@start_Set += to_vertex(input_key, "product");
  END;

  // traverse from the input vertexe set 
  Start = {@@start_Set};

  Start1 = SELECT s FROM Start:s
          ACCUM s.@is_Start = TRUE,
                s.@visited_1 = TRUE,
                s.@visited = TRUE,
                s.@new_price = @@input_Map.get(s)
          POST-ACCUM s.price = @@input_Map.get(s)
  ;

  @@depth = 1;


  // traverse down to the raw materials, each vertex will only serve as start
  // vertex for once, and mark them with their maximum depth value
  WHILE (Start1.size() > 0) LIMIT maxIteration DO
    Start1 = SELECT u
        FROM Start1:o-(usedBy>)- product:u
        POST-ACCUM
            // when start product is on the path of other start product
            CASE WHEN u.@is_Start == TRUE THEN
                u.@max_Depth += @@depth
            END,
            // if first time visit just pass the depth along
            CASE WHEN u.@visited_1 == FALSE THEN
                u.@visited_1 = true
            // keep the largest depth
            ELSE 
                u.@max_Depth += @@depth
            END
        HAVING u.@max_Depth == 0;
        @@depth += 1;
  END;

  // start from the input vertex set again
  Start2 = SELECT s FROM Start:s
          WHERE s.@max_Depth == 0;

  // reset the depth
  @@depth = 1;

  // traverse down to the raw materials again, each vertex will wait
  // until the iteration equals to its maximum depth value stored on it 
  // to calculate its new price
  WHILE (Start2.size() > 0) LIMIT maxIteration DO
    
    PRINT @@depth;

    // search first
    Start2 = SELECT u
      FROM Start2:o -(usedBy>)- product:u
      WHERE (u.@max_Depth == 0 OR u.@max_Depth <= @@depth) AND u.@visited == FALSE;

    // then do the calculation
    Start2 = SELECT o
      FROM Start2:o -(reverseUsedBy>:e)- product:u
      ACCUM CASE
          WHEN u.@visited == TRUE THEN
              o.@mapping += (e.formula_order->u.@new_price)
          ELSE 
              o.@mapping += (e.formula_order->u.price)
          END
          ,o.@amount_Map += (e.formula_order->e.useAmount)
          ,@@display_Set += e
          ,@@display_V += u
      POST-ACCUM
            // dynamically evaluate the formula string stored as an attribute
            STRING formula = o.formula,
            FOREACH (key,val) IN o.@mapping DO
              // replace the $1 string with the runtime value
              formula = replaceStr(formula,"$"+key,to_string(val*o.@amount_Map.get(key)))
            END,
            o.@new_price = evaluate(formula,"double"),

            LOG(TRUE,o.@new_price, formula, o.formula, o.name, o.@mapping),

            CASE WHEN doUpdate == TRUE THEN
              o.price = o.@new_price
            END,
            o.@visited = TRUE
    ;

    @@depth += 1;
  END;

  PRINT @@display_Set;

  final = {@@display_V};

  PRINT final;
}