create query impact_analysis(SET<VERTEX<site>> affectedSites, UINT maxDepth) for graph demo_graph syntax v2
{
  /*
    Start from multiple input affected sites, return the impacted site-product pairs. The impacted site-product pairs will be indentified from two paths, one is site-(delivery)-site relationship. Another one is site-(produce)-product-(use)-product relationship. Since not nessesarily all product belongs to a site is getting impacted. To calculte the subset we need infomation from both paths. That is the impacted product needs to use another impacted product delivered from a impacted site. This will require both delivery relationship and dependency relationship between products. Because a delivered product may not be used, a impacted product being used may not delivered from the very impacted site.

    Sample input:
    affectedSites: site5
    maxDepth: 10
  */
  
   typedef tuple<STRING siteName, STRING  prodName> spPair;

   SetAccum<spPair> @pair_Set;

   // products a site that has been affected
   SetAccum<STRING> @affected_Prod;

   // number of iteration
   SumAccum<INT> @@iteration = 0;

   // storing the result for unfinished goods
   SetAccum<EDGE> @@result_Set;

   // for pass along the edge info for visualization
   SetAccum<EDGE> @edge_Msg_Set;

   effectedSite = {affectedSites};

   WHILE (effectedSite.size() > 0) LIMIT maxDepth DO
   
     // get the impacted products from the impacted sites
     effectedProduct = SELECT p
                       FROM effectedSite:s -(produce>:e)- product:p
                       WHERE @@iteration == 0 OR s.@affected_Prod.contains(p.name) == TRUE
                       ACCUM p.@pair_Set += spPair(s.name, p.name)
                             // we assume all of the products got impacted from the input sites
                             ,CASE WHEN @@iteration == 0 THEN
                                 s.@affected_Prod += p.name
                                 ,@@result_Set += e
                             END
     ;

     // from the impacted products get its downsteam products
     downStreamProd = SELECT p
                      FROM effectedProduct:ep -(usedBy>:e) - product:p
                      ACCUM p.@pair_Set += ep.@pair_Set
                            ,p.@edge_Msg_Set += e
     ;

     // find the impacted sites from the previous effectedSite set 
     effectedSite = SELECT st
                    FROM effectedSite:s -(deliver>:e) - site:st
                    ACCUM 
                      CASE WHEN s.@affected_Prod.contains(e.itemId) THEN
                        st.@pair_Set += spPair(s.name,e.itemId)
                        ,st.@edge_Msg_Set += e
                      END
     ;

     // keep the impacted sites that are has deliveted imapcted product that is delivered
     // from a upstream site, and they also use this produt in producting their product
     effectedSite = SELECT st
                        FROM effectedSite:st -(produce>:e) - product:p
                        WHERE COUNT(st.@pair_Set INTERSECT p.@pair_Set) > 0
                        ACCUM 
                            st.@affected_Prod += p.name
                            ,@@result_Set += e 
                            ,@@result_Set += st.@edge_Msg_Set
                            ,@@result_Set += p.@edge_Msg_Set
                        POST-ACCUM
                            p.@pair_Set.clear()
     ;

     @@iteration += 1;
  END;

  PRINT @@result_Set;
}