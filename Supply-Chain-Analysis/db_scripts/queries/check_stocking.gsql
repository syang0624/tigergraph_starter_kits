create query check_stocking (VERTEX<product> input, UINT amount) for graph demo_graph syntax v2
{
  /*
  Given a product and ordering amount, calculate the needed amount for all the 
  raw materials, also the query calculates the current in stock raw material amount
  by checking the ordering and stocking records in the history. In the end, the query 
  output the BOM subgraph and show the calculated values on the leaf nodes 

  Sample input
  input:CAR WHEEL SET
  amount:5
  */
  SumAccum<INT> @consumed_Amount;
  SumAccum<INT> @needed_Amount;
  SumAccum<INT> @instock_Amount;

  OrAccum @has_Enough_Of_Material;

  SetAccum<EDGE> @@display_Set;

  // Start from all order hisotry vertexes
  Start (ANY) = {p_order.*};

  // calcuate ordered amount for the finished products
  Start = SELECT t
          FROM Start:s-(prodOrder:e)-:t
          ACCUM t.@consumed_Amount += e.amount;

  // traverse down to the raw materials, calculate the amount of raw materials has been comsumed
  WHILE (Start.size() > 0) DO
    Start = SELECT t
            FROM Start:s-(reverseUsedBy>:e)-:t
            ACCUM 
                t.@consumed_Amount += s.@consumed_Amount*e.useAmount
            POST-ACCUM
                // if there is stocking record in the history calculate its in stock amount
                CASE WHEN t.outdegree("prodStocking") > 0 THEN
                  t.@instock_Amount = SUM(t.edgeattribute("prodStocking","amount")) - t.@consumed_Amount 
                END
    ;
  END;

  // start from the input product
  Start = {input};
  Start = SELECT s
          FROM Start:s
          ACCUM
              s.@needed_Amount = amount
  ;

  PRINT Start;

  // again from the input product traverse down to the raw material, and see 
  // if is there enough raw material in stock
  // @hasEnoughOfMaterial will be true when there is enough
  WHILE (Start.size() > 0) DO
    Start = SELECT t
            FROM Start:s-(reverseUsedBy>:e)-:t
            ACCUM
                t.@needed_Amount += s.@needed_Amount*e.useAmount,
                @@display_Set += e
            POST-ACCUM
                CASE WHEN t.@instock_Amount != 0 THEN
                    CASE WHEN t.@instock_Amount > (t.@needed_Amount) THEN
                      t.@has_Enough_Of_Material += TRUE
                    END
                END
    ;

    PRINT Start;
  END;

  PRINT @@display_Set;
}